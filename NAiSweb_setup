#!/bin/bash

ConfigFile="config"


##########

func_exit_error() {
   exit 1
}

function parse_yaml {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

# Main
echo -en "\nparsing config.yml ..."
eval $(parse_yaml "${ConfigFile}")

# set yml path(s) (NAiSweb_) in array(s)
ArchivePath_array=($(compgen -v | grep '^NAiSweb_archive__'))
AudioPath_array=($(compgen -v | grep '^NAiSweb_audio__'))
MoviePath_array=($(compgen -v | grep '^NAiSweb_movie__'))
PicturePath_array=($(compgen -v | grep '^NAiSweb_picture__'))
VideoPath_array=($(compgen -v | grep '^NAiSweb_video__'))

# Keep only valid path(s) from array(s)
echo -en "\nsearching config for valid path(s)\n"
t_ArchivePath_array=(); for value in "${ArchivePath_array[@]}"; do if [ -d "${!value}" ]; then t_ArchivePath_array+=($value); fi; done; ArchivePath_array=("${t_ArchivePath_array[@]}"); unset t_ArchivePath_array
t_AudioPath_array=(); for value in "${AudioPath_array[@]}"; do if [ -d "${!value}" ]; then t_AudioPath_array+=($value); fi; done; AudioPath_array=("${t_AudioPath_array[@]}"); unset t_AudioPath_array
t_MoviePath_array=(); for value in "${MoviePath_array[@]}"; do if [ -d "${!value}" ]; then t_MoviePath_array+=($value); fi; done; MoviePath_array=("${t_MoviePath_array[@]}"); unset t_MoviePath_array
t_PicturePath_array=(); for value in "${PicturePath_array[@]}"; do if [ -d "${!value}" ]; then t_PicturePath_array+=($value); fi; done; PicturePath_array=("${t_PicturePath_array[@]}"); unset t_PicturePath_array
t_VideoPath_array=(); for value in "${VideoPath_array[@]}"; do if [ -d "${!value}" ]; then t_VideoPath_array+=($value); fi; done; VideoPath_array=("${t_VideoPath_array[@]}"); unset t_VideoPath_array

# Display valid path(s) found
echo "Archive path(s) ..."; for AEarchive in "${ArchivePath_array[@]}"; do echo "${!AEarchive}"; done
echo "Audio path(s) ..."; for AEaudio in "${AudioPath_array[@]}"; do echo "${!AEaudio}"; done
echo "Movie path(s) ..."; for AEmovie in "${MoviePath_array[@]}"; do echo "${!AEmovie}"; done
echo "Picture path(s) ..."; for AEpicture in "${PicturePath_array[@]}"; do echo "${!AEpicture}"; done
echo "Video path(s) ..."; for AEvideo in "${VideoPath_array[@]}"; do echo "${!AEvideo}"; done

# If paths exists create data/... directory tree and generate/store flat data
if [ ! -z "${ArchivePath_array}" ]; then mkdir -p data/arc; fi
if [ ! -z "${AudioPath_array}" ]; then mkdir -p data/aud; fi
if [ ! -z "${MoviePath_array}" ]; then mkdir -p data/mov; fi
if [ ! -z "${PicturePath_array}" ]; then mkdir -p data/pic; fi
if [ ! -z "${VideoPath_array}" ]; then mkdir -p data/vid; fi

