#!/bin/bash

########## Declare section

ConfigFile="config.yml"
TempDir="/tmp/.NAiSweb"
DataDir="NAiSweb_Data"
# verbose switch : verbose|noverbose
verbose="noverbose"

########## End Declare section


function defineColors() {
  # defineColors() define colors used when called
  # Typical use: call the function if ${color}="color"

  #TERM='xterm'; export TERM
  TERM='xterm-256color'; export TERM

  reset=$(tput setaf 7)
  bold=$(tput bold)
  blue=$(tput setaf 4)
  dim=$(tput setaf 0)
  green=$(tput setaf 2)
  red=$(tput setaf 1)
  yellow=$(tput setaf 3)
}

function tag() {
  # tag() output a colored tag followed by optional $2 as message like: [ TAG ] $2
  # comment tag diplayed only when global ${verbose}="verbose"
  # b|blue|info) INFO # c|comment|debug) DEBUG # y|yellow|warning) WARNING
  # g|green|ok) OK # r|red|error) ERROR

  defineColors

  local label
  local email_label
  local display="display"
  case $1 in
    b|blue|info) label="${blue:-}INFO"; email_label="INFO" ;;
    c|comment|debug) label="${dim:-}DEBUG" ; email_label="DEBUG" ; [[ ${verbose:-} != "verbose" ]] && display="no" ;;
    g|green|ok) label="${green:-}OK" ; email_label="OK" ;;
    r|red|error) label="${bold:-}${red:-}ERROR" ; email_label="ERROR" ;;
    y|yellow|warning) label="${yellow:-}WARNING"; email_label="WARNING" ;;
    *) echo "ERROR 'tag $@' is invalid" ;;
  esac
  shift # remove $1 to use $@
  if [[ -z "${1:-}" ]]; then
    message=" " # no message, tag only
  else
    message="$@" # every argument will be displayed after the tag
  fi
  if [[ ${display} == "display" ]]; then
    grep -q 'ERROR' <<< "${label}" && echo -ne "${dim:-}[ ${label} ${dim:-}]${reset:-} ${message}" 1>&2 || echo -ne "${dim:-}[ ${label} ${dim:-}]${reset:-} ${message}"
    if [ ! -z "${CFOPS_LOG}" ]; then echo -ne "[ ${email_label} ] ${message}" >> "${CFOPS_LOG}"; fi
  fi
}

function exit_error() {
  cd "${CurentDir}/";
  rm -Rf "${TempDir}"
  exit 1
}

function ctrl_c() {
  tag warning "\n\t! execution interrupted !\n"
  exit_error
}

function check_prerequisites_and_cleanup_old_data() {
  # prerequisites checks
  if [ ! -f "./bin/yaml2json" ] ; then tag error "yaml2json is not present\n"; exit_error ; fi
  if ! jq --version > /dev/null 2>&1 ; then tag error "jq is not installed\n try : \nsudo apt-get install jq\n"; exit_error ; fi
  tag ok "prerequisites checks\n"

  # cleanup previous data if exists
  if [ -d "${DataDir}" ]; then
    if ! rm -Rf ${DataDir}/* ; then tag error "Could not clean ${DataDir} data directory content\n"; else tag ok "cleaned ${DataDir} data directory content\n"; fi
  else
    if ! mkdir -p "${DataDir}" ; then tag error "Could not find and create ${DataDir} data directory\n"; else tag ok "created ${DataDir} data directory\n"; fi
  fi
  
  mkdir -p "${TempDir}"; if [ ! -d "${TempDir}" ]; then tag error "Could not create temporary directory : ${TempDir}\n"; fi

  # check config file
  if [ ! -r "${ConfigFile}" ]; then tag error "Could not read config file : ${ConfigFile}\n"; fi
}

function generate_data_from_paths() {
  string=$1 ; Afiletype=($@)
  OLDIFS="${IFS}"; IFS=$(echo -en "\n\b") # fix for paths with spaces

  # loop file types, if include path is not empty and valide then generate tree in data directory
  for dtype in "${Afiletype[@]}"; do
    tag info "fetching files from ${dtype}...\n"
    # get supported formats
    declare -a Asupformat=($(yaml2json < "${ConfigFile}" | jq -r ".config.${dtype}.supportedformat | .[]" 2>/dev/null))
    if [ -z "${Asupformat}" ]; then
      tag warning "no supported format defined, skipping ${dtype} ..."
    else
      # get includepaths
      declare -a Aincludepath=($(yaml2json < "${ConfigFile}" | jq -r ".config.${dtype}.includepath | .[]" 2>/dev/null))
      if [ -z "${Aincludepath}" ]; then
        tag warning "no path defined, skipping ${dtype} ..."
      else
        # get excludepaths
        declare -a Aexcludepath=($(yaml2json < "${ConfigFile}" | jq -r ".config.${dtype}.excludepath | .[]" 2>/dev/null))

        tag info "supported format(s) : ${Asupformat[@]}\n"
        for linclude in "${Aincludepath[@]}"; do
          tag info "include path -> ${linclude}\n"
        done
        if [ ! -z "${Aexcludepath}" ]; then
          for lexclude in "${Aexcludepath[@]}"; do
            tag info "exclude path <- ${lexclude}\n"
          done
        fi
      fi
    fi
  done

  IFS="${OLDIFS}"
}

function fetch_file_types_and_generate_data_tree() {
  # fetch file types from config.yml
  # Put file types (archive, audio, movie...) in array 
  declare -a Afiletype=($(yaml2json < "${ConfigFile}" | jq -r '.config | .[] | .filetype' 2>/dev/null))
  if [ -z "${Afiletype}" ]; then
    tag error "Error getting file type from config.yml file\n"
  else
    tag ok "file type(s) fetched.\n"
    tag info "${Afiletype[@]}\n"
  fi

  # and regenerate temp/data directory structure
  for dtype in "${Afiletype[@]}"; do
    if ! mkdir -p "${DataDir}/${dtype}" ; then tag error "Could not create directory : ${DataDir}/${dtype}\n"; fi
  done
  tag ok "generated data directory structure\n"

  generate_data_from_paths "${Afiletype[@]}"
}


# Main
CurentDir="$(pwd)"
echo -e "\n$(basename $0)"
PATH="${PATH}:${CurentDir}/bin"

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT

check_prerequisites_and_cleanup_old_data
fetch_file_types_and_generate_data_tree


echo ""
cd "${CurentDir}/"
rm -Rf "${TempDir}"
echo -e "Enjoy !\n"
